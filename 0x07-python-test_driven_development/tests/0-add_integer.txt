This library is very simple, since it only has one function called
``add_integer()``.

``add_integer()`` returns the sum of its arguments.  For numbers,
that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer

::

    >>> add_integer(1, 2)
    3

::

    >>> add_integer(2)
    100

If an argument is floating-point value, it's casted to an integer.

::

    >>> add_integer(2.5, 3.7)
    5

::

    >>> add_integer(3.7)
    101

::

    >>> add_integer(2.5, 7)
    9

::

    >>> add_integer('a', 3)
    Traceback (most recent call last):
    	...
    TypeError: a must be an integer

::

    >>> add_integer('a', 'z')
    Traceback (most recent call last):
    	...
    TypeError: a must be an integer

::

    >>> add_integer(1 + 2j)
    Traceback (most recent call last):
    	...
    TypeError: a must be an integer

::

    >>> add_integer(4, 3 + 1j)
    Traceback (most recent call last):
    	...
    TypeError: b must be an integer

::

    >>> add_integer(3, None)
    Traceback (most recent call last):
    	...
    TypeError: b must be an integer

::

    >>> add_integer(3, "s")
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

::

    >>> add_integer(None, None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

::

    >>> add_integer()
    Traceback (most recent call last):
        ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
        ...
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
        ...
    OverflowError: cannot convert float infinity to integer
